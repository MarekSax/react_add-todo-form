{"version":3,"sources":["components/UserInfo/UserInfo.tsx","api/users.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","id","username","TodoInfo","todo","title","completed","userId","todoUser","usersFromServer","find","classNames","TodoList","todos","map","App","useState","todosFromServer","setTodos","setTitle","setUserId","titleNotFilled","setTitleNotFilled","userNotFilled","setUserNotFilled","action","method","onSubmit","event","preventDefault","newTodo","Math","max","oldTodos","htmlFor","type","placeholder","onChange","target","value","disabled","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78d5e511.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\nimport usersFromServer from '../../api/users';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id, title, completed, userId,\n  } = todo;\n\n  const todoUser = usersFromServer.find(user => user.id === userId) || null;\n\n  return (\n    <article\n      data-id={id}\n      key={id}\n      className={classNames('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {todoUser && (<UserInfo user={todoUser} />)}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n\n  const [titleNotFilled, setTitleNotFilled] = useState(false);\n  const [userNotFilled, setUserNotFilled] = useState(false);\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setTitleNotFilled(false);\n  };\n\n  const handleUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setUserNotFilled(false);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleOnSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setTitleNotFilled(!title);\n    setUserNotFilled(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    const newId = Math.max(...todos.map(todo => todo.id)) + 1;\n\n    const newTodo = {\n      id: newId,\n      title,\n      completed: false,\n      userId,\n    };\n\n    setTodos(oldTodos => [...oldTodos, newTodo]);\n\n    resetForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\" onSubmit={handleOnSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"title\"\n            placeholder=\"Enter a title\"\n            onChange={handleTitle}\n            value={title}\n          />\n          {titleNotFilled\n            && (<span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            onChange={handleUserSelect}\n            value={userId}\n          >\n            <option value=\"0\" disabled selected>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {userNotFilled\n            && (<span className=\"error\">Please choose a user</span>)}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}